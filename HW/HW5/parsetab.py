
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftDISJUNCTIONleftCONJUNCTIONleftNEGATIONleftLESSTHANLESSTHANEQUALTOEQUALSNOTEQUALSGREATERTHANEQUALTOGREATERTHANrightCONCATENATIONleftINleftPLUSMINUSleftMULTIPLICATIONDIVISIONDIVMODnonassocUMINUSrightEXPONENTIATIONleftLEFT_CURLY_PARENTHESISRIGHT_CURLY_PARENTHESISleftLIST_LEFT_PARENTHESISLIST_RIGHT_PARENTHESISleftPOUNDleftLEFT_PARENTHESISRIGHT_PARENTHESISASSIGNMENT BOOLEAN COMMA CONCATENATION CONJUNCTION DISJUNCTION DIV DIVISION ELSE EQUALS EXPONENTIATION FUN GREATERTHAN GREATERTHANEQUALTO IF IN INTEGER LEFT_CURLY_PARENTHESIS LEFT_PARENTHESIS LESSTHAN LESSTHANEQUALTO LIST_LEFT_PARENTHESIS LIST_RIGHT_PARENTHESIS MINUS MOD MULTIPLICATION NEGATION NOTEQUALS PLUS POUND PRINT REAL RIGHT_CURLY_PARENTHESIS RIGHT_PARENTHESIS SEMICOLON STRINGS VARIABLE WHILE  program : functions block   program :  block   functions : function   functions : functions function  function : FUN VARIABLE LEFT_PARENTHESIS func_args RIGHT_PARENTHESIS ASSIGNMENT block expr SEMICOLON  function : FUN VARIABLE LEFT_PARENTHESIS RIGHT_PARENTHESIS ASSIGNMENT block expr SEMICOLON  func_args : func_args COMMA expr  func_args : expr  expr : VARIABLE LEFT_PARENTHESIS func_args RIGHT_PARENTHESIS expr : VARIABLE LEFT_PARENTHESIS  RIGHT_PARENTHESIS block : LEFT_CURLY_PARENTHESIS RIGHT_CURLY_PARENTHESIS  block : LEFT_CURLY_PARENTHESIS statement_list RIGHT_CURLY_PARENTHESIS  statement : block statement_list : statement  statement_list : statement_list statementstatement : PRINT LEFT_PARENTHESIS expr RIGHT_PARENTHESIS SEMICOLON statement : IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS block\n    statement : IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS block ELSE block\n    statement : WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS blockstatement : VARIABLE ASSIGNMENT expr SEMICOLON statement : expr  LIST_LEFT_PARENTHESIS expr  LIST_RIGHT_PARENTHESIS ASSIGNMENT expr SEMICOLON expr : INTEGER\n            | REAL\n            | STRINGS\n            | VARIABLE\n            | BOOLEAN\n            | list\n            | tuple\n            | index tuple : LEFT_PARENTHESIS expr RIGHT_PARENTHESIS expr : LIST_LEFT_PARENTHESIS LIST_RIGHT_PARENTHESIS list : LIST_LEFT_PARENTHESIS args LIST_RIGHT_PARENTHESIS args : args COMMA expr args : exprindex : expr LIST_LEFT_PARENTHESIS expr LIST_RIGHT_PARENTHESIS  tuple : LEFT_PARENTHESIS args RIGHT_PARENTHESIS index : POUND INTEGER  expr  expr : expr IN expr  expr : expr CONCATENATION expr expr : expr PLUS expr expr : expr MINUS expr expr : MINUS expr %prec UMINUS   expr : expr MULTIPLICATION expr  expr : expr DIVISION expr  expr : expr DIV expr  expr : expr MOD expr  expr : expr EXPONENTIATION expr  expr : NEGATION expr  expr : expr CONJUNCTION expr expr : expr DISJUNCTION expr expr : expr LESSTHAN expr\n            | expr LESSTHANEQUALTO expr\n            | expr EQUALS expr\n            | expr NOTEQUALS expr\n            | expr GREATERTHANEQUALTO expr\n            | expr GREATERTHAN expr '
    
_lr_action_items = {'LEFT_CURLY_PARENTHESIS':([0,2,4,5,8,9,10,11,12,31,32,103,104,105,109,110,113,114,116,119,122,123,125,126,],[5,5,-3,5,-4,-11,5,-14,-13,-12,-15,5,5,-20,5,-16,-17,-19,5,5,-21,-18,-6,-5,]),'FUN':([0,2,4,8,125,126,],[6,6,-3,-4,-6,-5,]),'$end':([1,3,7,9,31,],[0,-2,-1,-11,-12,]),'RIGHT_CURLY_PARENTHESIS':([5,9,10,11,12,31,32,105,110,113,114,122,123,],[9,-11,31,-14,-13,-12,-15,-20,-16,-17,-19,-21,-18,]),'PRINT':([5,9,10,11,12,31,32,105,110,113,114,122,123,],[13,-11,13,-14,-13,-12,-15,-20,-16,-17,-19,-21,-18,]),'IF':([5,9,10,11,12,31,32,105,110,113,114,122,123,],[16,-11,16,-14,-13,-12,-15,-20,-16,-17,-19,-21,-18,]),'WHILE':([5,9,10,11,12,31,32,105,110,113,114,122,123,],[17,-11,17,-14,-13,-12,-15,-20,-16,-17,-19,-21,-18,]),'VARIABLE':([5,6,9,10,11,12,14,19,27,28,31,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,68,70,105,107,110,112,113,114,117,120,122,123,],[18,30,-11,18,-14,-13,36,36,36,36,-12,-15,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-20,36,-16,36,-17,-19,36,36,-21,-18,]),'INTEGER':([5,9,10,11,12,14,19,27,28,29,31,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,68,70,105,107,110,112,113,114,117,120,122,123,],[20,-11,20,-14,-13,20,20,20,20,64,-12,-15,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-20,20,-16,20,-17,-19,20,20,-21,-18,]),'REAL':([5,9,10,11,12,14,19,27,28,31,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,68,70,105,107,110,112,113,114,117,120,122,123,],[21,-11,21,-14,-13,21,21,21,21,-12,-15,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-20,21,-16,21,-17,-19,21,21,-21,-18,]),'STRINGS':([5,9,10,11,12,14,19,27,28,31,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,68,70,105,107,110,112,113,114,117,120,122,123,],[22,-11,22,-14,-13,22,22,22,22,-12,-15,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-20,22,-16,22,-17,-19,22,22,-21,-18,]),'BOOLEAN':([5,9,10,11,12,14,19,27,28,31,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,68,70,105,107,110,112,113,114,117,120,122,123,],[23,-11,23,-14,-13,23,23,23,23,-12,-15,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-20,23,-16,23,-17,-19,23,23,-21,-18,]),'LIST_LEFT_PARENTHESIS':([5,9,10,11,12,14,15,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,105,106,107,110,111,112,113,114,115,117,118,120,121,122,123,124,],[19,-11,19,-14,-13,19,37,-25,19,-22,-23,-24,-26,-27,-28,-29,19,19,-12,-15,19,68,-25,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-31,68,68,68,19,19,68,-30,19,-36,19,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-10,68,-32,68,68,68,-35,-20,-9,19,-16,-35,19,-17,-19,68,19,68,19,68,-21,-18,68,]),'MINUS':([5,9,10,11,12,14,15,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,105,106,107,110,111,112,113,114,115,117,118,120,121,122,123,124,],[27,-11,27,-14,-13,27,41,-25,27,-22,-23,-24,-26,-27,-28,-29,27,27,-12,-15,27,41,-25,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-31,41,-42,41,27,27,41,-30,27,-36,27,41,41,41,-40,-41,-43,-44,-45,-46,-47,41,41,41,41,41,41,41,41,41,41,41,-10,41,-32,41,41,41,-35,-20,-9,27,-16,-35,27,-17,-19,41,27,41,27,41,-21,-18,41,]),'NEGATION':([5,9,10,11,12,14,19,27,28,31,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,68,70,105,107,110,112,113,114,117,120,122,123,],[28,-11,28,-14,-13,28,28,28,28,-12,-15,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-20,28,-16,28,-17,-19,28,28,-21,-18,]),'LEFT_PARENTHESIS':([5,9,10,11,12,13,14,16,17,18,19,27,28,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,68,70,105,107,110,112,113,114,117,120,122,123,],[14,-11,14,-14,-13,33,14,55,56,58,14,14,14,65,-12,-15,14,58,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-20,14,-16,14,-17,-19,14,14,-21,-18,]),'POUND':([5,9,10,11,12,14,19,27,28,31,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,68,70,105,107,110,112,113,114,117,120,122,123,],[29,-11,29,-14,-13,29,29,29,29,-12,-15,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-20,29,-16,29,-17,-19,29,29,-21,-18,]),'ELSE':([9,31,113,],[-11,-12,119,]),'IN':([15,18,20,21,22,23,24,25,26,34,36,59,61,62,63,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,106,111,115,118,121,124,],[38,-25,-22,-23,-24,-26,-27,-28,-29,38,-25,-31,38,-42,38,38,-30,-36,38,-38,38,-40,-41,-43,-44,-45,-46,-47,38,38,38,38,38,38,38,38,38,38,38,-10,38,-32,38,38,38,-35,-9,-35,38,38,38,38,]),'CONCATENATION':([15,18,20,21,22,23,24,25,26,34,36,59,61,62,63,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,106,111,115,118,121,124,],[39,-25,-22,-23,-24,-26,-27,-28,-29,39,-25,-31,39,-42,39,39,-30,-36,39,-38,39,-40,-41,-43,-44,-45,-46,-47,39,39,39,39,39,39,39,39,39,39,39,-10,39,-32,39,39,39,-35,-9,-35,39,39,39,39,]),'PLUS':([15,18,20,21,22,23,24,25,26,34,36,59,61,62,63,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,106,111,115,118,121,124,],[40,-25,-22,-23,-24,-26,-27,-28,-29,40,-25,-31,40,-42,40,40,-30,-36,40,40,40,-40,-41,-43,-44,-45,-46,-47,40,40,40,40,40,40,40,40,40,40,40,-10,40,-32,40,40,40,-35,-9,-35,40,40,40,40,]),'MULTIPLICATION':([15,18,20,21,22,23,24,25,26,34,36,59,61,62,63,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,106,111,115,118,121,124,],[42,-25,-22,-23,-24,-26,-27,-28,-29,42,-25,-31,42,-42,42,42,-30,-36,42,42,42,42,42,-43,-44,-45,-46,-47,42,42,42,42,42,42,42,42,42,42,42,-10,42,-32,42,42,42,-35,-9,-35,42,42,42,42,]),'DIVISION':([15,18,20,21,22,23,24,25,26,34,36,59,61,62,63,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,106,111,115,118,121,124,],[43,-25,-22,-23,-24,-26,-27,-28,-29,43,-25,-31,43,-42,43,43,-30,-36,43,43,43,43,43,-43,-44,-45,-46,-47,43,43,43,43,43,43,43,43,43,43,43,-10,43,-32,43,43,43,-35,-9,-35,43,43,43,43,]),'DIV':([15,18,20,21,22,23,24,25,26,34,36,59,61,62,63,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,106,111,115,118,121,124,],[44,-25,-22,-23,-24,-26,-27,-28,-29,44,-25,-31,44,-42,44,44,-30,-36,44,44,44,44,44,-43,-44,-45,-46,-47,44,44,44,44,44,44,44,44,44,44,44,-10,44,-32,44,44,44,-35,-9,-35,44,44,44,44,]),'MOD':([15,18,20,21,22,23,24,25,26,34,36,59,61,62,63,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,106,111,115,118,121,124,],[45,-25,-22,-23,-24,-26,-27,-28,-29,45,-25,-31,45,-42,45,45,-30,-36,45,45,45,45,45,-43,-44,-45,-46,-47,45,45,45,45,45,45,45,45,45,45,45,-10,45,-32,45,45,45,-35,-9,-35,45,45,45,45,]),'EXPONENTIATION':([15,18,20,21,22,23,24,25,26,34,36,59,61,62,63,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,106,111,115,118,121,124,],[46,-25,-22,-23,-24,-26,-27,-28,-29,46,-25,-31,46,46,46,46,-30,-36,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-10,46,-32,46,46,46,-35,-9,-35,46,46,46,46,]),'CONJUNCTION':([15,18,20,21,22,23,24,25,26,34,36,59,61,62,63,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,106,111,115,118,121,124,],[47,-25,-22,-23,-24,-26,-27,-28,-29,47,-25,-31,47,-42,-48,47,-30,-36,47,-38,-39,-40,-41,-43,-44,-45,-46,-47,-49,47,-51,-52,-53,-54,-55,-56,47,47,47,-10,47,-32,47,47,47,-35,-9,-35,47,47,47,47,]),'DISJUNCTION':([15,18,20,21,22,23,24,25,26,34,36,59,61,62,63,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,106,111,115,118,121,124,],[48,-25,-22,-23,-24,-26,-27,-28,-29,48,-25,-31,48,-42,-48,48,-30,-36,48,-38,-39,-40,-41,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-55,-56,48,48,48,-10,48,-32,48,48,48,-35,-9,-35,48,48,48,48,]),'LESSTHAN':([15,18,20,21,22,23,24,25,26,34,36,59,61,62,63,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,106,111,115,118,121,124,],[49,-25,-22,-23,-24,-26,-27,-28,-29,49,-25,-31,49,-42,49,49,-30,-36,49,-38,-39,-40,-41,-43,-44,-45,-46,-47,49,49,-51,-52,-53,-54,-55,-56,49,49,49,-10,49,-32,49,49,49,-35,-9,-35,49,49,49,49,]),'LESSTHANEQUALTO':([15,18,20,21,22,23,24,25,26,34,36,59,61,62,63,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,106,111,115,118,121,124,],[50,-25,-22,-23,-24,-26,-27,-28,-29,50,-25,-31,50,-42,50,50,-30,-36,50,-38,-39,-40,-41,-43,-44,-45,-46,-47,50,50,-51,-52,-53,-54,-55,-56,50,50,50,-10,50,-32,50,50,50,-35,-9,-35,50,50,50,50,]),'EQUALS':([15,18,20,21,22,23,24,25,26,34,36,59,61,62,63,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,106,111,115,118,121,124,],[51,-25,-22,-23,-24,-26,-27,-28,-29,51,-25,-31,51,-42,51,51,-30,-36,51,-38,-39,-40,-41,-43,-44,-45,-46,-47,51,51,-51,-52,-53,-54,-55,-56,51,51,51,-10,51,-32,51,51,51,-35,-9,-35,51,51,51,51,]),'NOTEQUALS':([15,18,20,21,22,23,24,25,26,34,36,59,61,62,63,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,106,111,115,118,121,124,],[52,-25,-22,-23,-24,-26,-27,-28,-29,52,-25,-31,52,-42,52,52,-30,-36,52,-38,-39,-40,-41,-43,-44,-45,-46,-47,52,52,-51,-52,-53,-54,-55,-56,52,52,52,-10,52,-32,52,52,52,-35,-9,-35,52,52,52,52,]),'GREATERTHANEQUALTO':([15,18,20,21,22,23,24,25,26,34,36,59,61,62,63,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,106,111,115,118,121,124,],[53,-25,-22,-23,-24,-26,-27,-28,-29,53,-25,-31,53,-42,53,53,-30,-36,53,-38,-39,-40,-41,-43,-44,-45,-46,-47,53,53,-51,-52,-53,-54,-55,-56,53,53,53,-10,53,-32,53,53,53,-35,-9,-35,53,53,53,53,]),'GREATERTHAN':([15,18,20,21,22,23,24,25,26,34,36,59,61,62,63,66,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,100,101,102,106,111,115,118,121,124,],[54,-25,-22,-23,-24,-26,-27,-28,-29,54,-25,-31,54,-42,54,54,-30,-36,54,-38,-39,-40,-41,-43,-44,-45,-46,-47,54,54,-51,-52,-53,-54,-55,-56,54,54,54,-10,54,-32,54,54,54,-35,-9,-35,54,54,54,54,]),'ASSIGNMENT':([18,98,102,108,],[57,109,112,116,]),'LIST_RIGHT_PARENTHESIS':([19,20,21,22,23,24,25,26,36,59,60,61,62,63,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,95,96,100,101,106,111,],[59,-22,-23,-24,-26,-27,-28,-29,-25,-31,95,-34,-42,-48,-30,-36,102,-38,-39,-40,-41,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-55,-56,-10,-32,-37,111,-33,-9,-35,]),'RIGHT_PARENTHESIS':([20,21,22,23,24,25,26,34,35,36,58,59,62,63,65,66,67,69,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,101,106,111,115,],[-22,-23,-24,-26,-27,-28,-29,67,69,-25,93,-31,-42,-48,98,99,-30,-36,-38,-39,-40,-41,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-55,-56,103,104,106,-10,-8,-32,-37,108,-33,-9,-35,-7,]),'COMMA':([20,21,22,23,24,25,26,34,35,36,59,60,61,62,63,67,69,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,95,96,97,101,106,111,115,],[-22,-23,-24,-26,-27,-28,-29,-34,70,-25,-31,70,-34,-42,-48,-30,-36,-38,-39,-40,-41,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-55,-56,107,-10,-8,-32,-37,107,-33,-9,-35,-7,]),'SEMICOLON':([20,21,22,23,24,25,26,36,59,62,63,67,69,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,91,93,95,96,99,106,111,118,121,124,],[-22,-23,-24,-26,-27,-28,-29,-25,-31,-42,-48,-30,-36,-38,-39,-40,-41,-43,-44,-45,-46,-47,-49,-50,-51,-52,-53,-54,-55,-56,105,-10,-32,-37,110,-9,-35,122,125,126,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'functions':([0,],[2,]),'block':([0,2,5,10,103,104,109,116,119,],[3,7,12,12,113,114,117,120,123,]),'function':([0,2,],[4,8,]),'statement_list':([5,],[10,]),'statement':([5,10,],[11,32,]),'expr':([5,10,14,19,27,28,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,68,70,107,112,117,120,],[15,15,34,61,62,63,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,96,94,100,101,115,118,121,124,]),'list':([5,10,14,19,27,28,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,68,70,107,112,117,120,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'tuple':([5,10,14,19,27,28,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,68,70,107,112,117,120,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'index':([5,10,14,19,27,28,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,68,70,107,112,117,120,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'args':([14,19,],[35,60,]),'func_args':([58,65,],[92,97,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> functions block','program',2,'p_complete_program','sbml.py',648),
  ('program -> block','program',1,'p_program_without_functions','sbml.py',654),
  ('functions -> function','functions',1,'p_functions_1','sbml.py',660),
  ('functions -> functions function','functions',2,'p_functions_2','sbml.py',666),
  ('function -> FUN VARIABLE LEFT_PARENTHESIS func_args RIGHT_PARENTHESIS ASSIGNMENT block expr SEMICOLON','function',9,'p_function','sbml.py',672),
  ('function -> FUN VARIABLE LEFT_PARENTHESIS RIGHT_PARENTHESIS ASSIGNMENT block expr SEMICOLON','function',8,'p_function_2','sbml.py',678),
  ('func_args -> func_args COMMA expr','func_args',3,'p_func_args_1','sbml.py',683),
  ('func_args -> expr','func_args',1,'p_func_args_2','sbml.py',689),
  ('expr -> VARIABLE LEFT_PARENTHESIS func_args RIGHT_PARENTHESIS','expr',4,'p_expr_func','sbml.py',694),
  ('expr -> VARIABLE LEFT_PARENTHESIS RIGHT_PARENTHESIS','expr',3,'p_expr_func_2','sbml.py',698),
  ('block -> LEFT_CURLY_PARENTHESIS RIGHT_CURLY_PARENTHESIS','block',2,'p_block_1','sbml.py',703),
  ('block -> LEFT_CURLY_PARENTHESIS statement_list RIGHT_CURLY_PARENTHESIS','block',3,'p_block_2','sbml.py',708),
  ('statement -> block','statement',1,'p_block_3','sbml.py',713),
  ('statement_list -> statement','statement_list',1,'p_statement_list_1','sbml.py',718),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_2','sbml.py',723),
  ('statement -> PRINT LEFT_PARENTHESIS expr RIGHT_PARENTHESIS SEMICOLON','statement',5,'p_print_statement','sbml.py',728),
  ('statement -> IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS block','statement',5,'p_if_statement','sbml.py',733),
  ('statement -> IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS block ELSE block','statement',7,'p_if_else_statement','sbml.py',739),
  ('statement -> WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS block','statement',5,'p_while_statement','sbml.py',745),
  ('statement -> VARIABLE ASSIGNMENT expr SEMICOLON','statement',4,'p_assignment_statement','sbml.py',751),
  ('statement -> expr LIST_LEFT_PARENTHESIS expr LIST_RIGHT_PARENTHESIS ASSIGNMENT expr SEMICOLON','statement',7,'p_assignment_statement_2','sbml.py',756),
  ('expr -> INTEGER','expr',1,'p_expr','sbml.py',761),
  ('expr -> REAL','expr',1,'p_expr','sbml.py',762),
  ('expr -> STRINGS','expr',1,'p_expr','sbml.py',763),
  ('expr -> VARIABLE','expr',1,'p_expr','sbml.py',764),
  ('expr -> BOOLEAN','expr',1,'p_expr','sbml.py',765),
  ('expr -> list','expr',1,'p_expr','sbml.py',766),
  ('expr -> tuple','expr',1,'p_expr','sbml.py',767),
  ('expr -> index','expr',1,'p_expr','sbml.py',768),
  ('tuple -> LEFT_PARENTHESIS expr RIGHT_PARENTHESIS','tuple',3,'p_parentheses_expr','sbml.py',773),
  ('expr -> LIST_LEFT_PARENTHESIS LIST_RIGHT_PARENTHESIS','expr',2,'p_empty_list','sbml.py',779),
  ('list -> LIST_LEFT_PARENTHESIS args LIST_RIGHT_PARENTHESIS','list',3,'p_expr_list','sbml.py',784),
  ('args -> args COMMA expr','args',3,'p_args','sbml.py',789),
  ('args -> expr','args',1,'p_args_2','sbml.py',795),
  ('index -> expr LIST_LEFT_PARENTHESIS expr LIST_RIGHT_PARENTHESIS','index',4,'p_expr_list_index','sbml.py',800),
  ('tuple -> LEFT_PARENTHESIS args RIGHT_PARENTHESIS','tuple',3,'p_tuple','sbml.py',806),
  ('index -> POUND INTEGER expr','index',3,'p_expr_tuple_index','sbml.py',811),
  ('expr -> expr IN expr','expr',3,'p_searching','sbml.py',816),
  ('expr -> expr CONCATENATION expr','expr',3,'p_expr_concatenation','sbml.py',821),
  ('expr -> expr PLUS expr','expr',3,'p_expr_addition','sbml.py',827),
  ('expr -> expr MINUS expr','expr',3,'p_expr_subtraction','sbml.py',832),
  ('expr -> MINUS expr','expr',2,'p_expr2uminus','sbml.py',837),
  ('expr -> expr MULTIPLICATION expr','expr',3,'p_expr_multiplication','sbml.py',842),
  ('expr -> expr DIVISION expr','expr',3,'p_expr_division','sbml.py',847),
  ('expr -> expr DIV expr','expr',3,'p_expr_div','sbml.py',852),
  ('expr -> expr MOD expr','expr',3,'p_expr_mod','sbml.py',857),
  ('expr -> expr EXPONENTIATION expr','expr',3,'p_expr_exponentiation','sbml.py',862),
  ('expr -> NEGATION expr','expr',2,'p_expr_negation','sbml.py',868),
  ('expr -> expr CONJUNCTION expr','expr',3,'p_expr_conjunction','sbml.py',873),
  ('expr -> expr DISJUNCTION expr','expr',3,'p_expr_disjunction','sbml.py',878),
  ('expr -> expr LESSTHAN expr','expr',3,'p_expr_less_than','sbml.py',884),
  ('expr -> expr LESSTHANEQUALTO expr','expr',3,'p_expr_less_than','sbml.py',885),
  ('expr -> expr EQUALS expr','expr',3,'p_expr_less_than','sbml.py',886),
  ('expr -> expr NOTEQUALS expr','expr',3,'p_expr_less_than','sbml.py',887),
  ('expr -> expr GREATERTHANEQUALTO expr','expr',3,'p_expr_less_than','sbml.py',888),
  ('expr -> expr GREATERTHAN expr','expr',3,'p_expr_less_than','sbml.py',889),
]
